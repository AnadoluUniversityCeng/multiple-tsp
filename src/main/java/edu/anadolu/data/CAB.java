package edu.anadolu.data;

import edu.anadolu.util.Utils;

import java.util.Arrays;

/**
 * The CAB dataset, taken from: <a href="http://people.brunel.ac.uk/~mastjjb/jeb/orlib/files/phub4.txt">...</a>
 */
final class CAB implements IFlow, IMax {

    CAB() {
    }

    @Override
    public int size() {
        return DISTANCE.length;
    }

    @Override
    public double distance(int from, int to) {
        return DISTANCE[from][to];
    }

    @Override
    public int flow(int from, int to) {
        return FLOW[from][to];
    }

    @Override
    public int supply(int node) {
        return SUPPLY[node];
    }

    @Override
    public int demand(int node) {
        return DEMAND[node];
    }

    private static final int[][] FLOW = new int[][]{
            {0, 6469, 7629, 20036, 4690, 6194, 11688, 2243, 8857, 7248, 3559, 9221, 10099, 22866, 3388, 9986, 46618, 11639, 1380, 5261, 5985, 6731, 2704, 12250, 16132},
            {6469, 0, 12999, 13692, 3322, 5576, 3878, 3202, 6699, 4198, 2454, 7975, 1186, 7443, 1162, 5105, 24817, 6532, 806, 8184, 3896, 7333, 3719, 2015, 565},
            {7629, 12999, 0, 35135, 5956, 14121, 5951, 5768, 16578, 4242, 3365, 22254, 1841, 23665, 6517, 3541, 205088, 37669, 2885, 13200, 7116, 17165, 4284, 8085, 51895},
            {20036, 13692, 35135, 0, 19094, 35119, 21423, 27342, 51341, 15826, 28537, 65387, 12980, 44097, 51525, 14354, 172895, 37305, 15418, 26221, 42303, 35303, 13618, 17580, 40708},
            {4690, 3322, 5956, 19094, 0, 7284, 3102, 1562, 7180, 1917, 2253, 5951, 1890, 7097, 2009, 1340, 25303, 6031, 1041, 4128, 5452, 3344, 1067, 4608, 7050},
            {6194, 5576, 14121, 35119, 7284, 0, 5023, 3512, 10419, 3543, 2752, 14412, 2043, 15642, 5014, 2016, 62034, 15385, 2957, 5035, 7482, 6758, 2191, 6599, 14181},
            {11688, 3878, 5951, 21423, 3102, 5023, 0, 11557, 6479, 34261, 10134, 27350, 6929, 7961, 4678, 13511, 29801, 7549, 5550, 3089, 9958, 14110, 4911, 2722, 10802},
            {2243, 3202, 5768, 27342, 1562, 3512, 11557, 0, 5615, 7095, 10753, 30362, 1783, 3437, 8897, 2509, 23273, 5160, 8750, 2583, 7288, 17481, 7930, 1278, 8447},
            {8857, 6699, 16578, 51341, 7180, 10419, 6479, 5615, 0, 4448, 5076, 22463, 4783, 24609, 9969, 4224, 79945, 20001, 4291, 10604, 11925, 13091, 4172, 12891, 19500},
            {7248, 4198, 4242, 15826, 1917, 3543, 34261, 7095, 4448, 0, 4370, 17267, 3929, 8602, 2753, 20013, 28080, 5971, 2131, 3579, 6809, 8455, 2868, 2336, 5616},
            {3559, 2454, 3365, 28537, 2253, 2752, 10134, 10753, 5076, 4370, 0, 15287, 3083, 4092, 7701, 2809, 17291, 4462, 3239, 2309, 16003, 8381, 3033, 1755, 7266},
            {9221, 7975, 22254, 65387, 5951, 14412, 27350, 30362, 22463, 17267, 15287, 0, 5454, 15011, 17714, 10037, 105507, 20040, 31780, 10822, 16450, 92083, 32908, 3865, 24583},
            {10099, 1186, 1841, 12980, 1890, 2043, 6929, 1783, 4783, 3929, 3083, 5454, 0, 3251, 1126, 5926, 10653, 3062, 759, 1255, 6173, 2974, 1056, 1504, 4588},
            {22866, 7443, 23665, 44097, 7097, 15642, 7961, 3437, 24609, 8602, 4092, 15011, 3251, 0, 5550, 9473, 169397, 25073, 1170, 14272, 8543, 8064, 1840, 20618, 20937},
            {3388, 1162, 6517, 51525, 2009, 5014, 4678, 8897, 9969, 2753, 7701, 17714, 1126, 5550, 0, 2152, 26816, 6931, 4947, 2676, 8033, 12692, 6157, 3065, 12044},
            {9986, 5105, 3541, 14354, 1340, 2016, 13511, 2509, 4224, 20013, 2809, 10037, 5926, 9473, 2152, 0, 21806, 4519, 886, 1742, 4782, 6453, 2022, 3546, 5065},
            {46618, 24817, 205088, 172895, 25303, 62034, 29801, 23273, 79945, 28080, 17291, 105507, 10653, 169397, 26816, 21806, 0, 9040, 11139, 63153, 34092, 70935, 14957, 28398, 166694},
            {11639, 6532, 37669, 37305, 6031, 15385, 7549, 5160, 20001, 5971, 4462, 20040, 3062, 25073, 6931, 4519, 9040, 0, 2802, 30224, 7982, 14964, 4589, 6227, 12359},
            {1380, 806, 2885, 15418, 1041, 2957, 5550, 8750, 4291, 2131, 3239, 31780, 759, 1170, 4947, 886, 11139, 2802, 0, 1869, 3716, 11510, 3519, 569, 3520},
            {5261, 8184, 13200, 26221, 4128, 5035, 3089, 2583, 10604, 3579, 2309, 10822, 1255, 14272, 2676, 1742, 63153, 30224, 1869, 0, 5020, 6610, 2139, 5431, 13541},
            {5985, 3896, 7116, 42303, 5452, 7482, 9958, 7288, 11925, 6809, 16003, 16450, 6173, 8543, 8033, 4782, 34092, 7982, 3716, 5020, 0, 9942, 3276, 3820, 11799},
            {6731, 7333, 17165, 35303, 3344, 6758, 14110, 17481, 13091, 8455, 8381, 92083, 2974, 8064, 12692, 6453, 70935, 14964, 11510, 6610, 9942, 0, 35285, 2566, 19926},
            {2704, 3719, 4284, 13618, 1067, 2191, 4911, 7930, 4172, 2868, 3033, 32908, 1056, 1840, 6157, 2022, 14957, 4589, 3519, 2139, 3276, 35285, 0, 940, 4951},
            {12250, 2015, 8085, 17580, 4608, 6599, 2722, 1278, 12891, 2336, 1755, 3865, 1504, 20618, 3065, 3546, 28398, 6227, 569, 5431, 3820, 2566, 940, 0, 6237},
            {16132, 565, 51895, 40708, 7050, 14181, 10802, 8447, 19500, 5616, 7266, 24583, 4588, 20937, 12044, 5065, 166694, 12359, 3520, 13541, 11799, 19926, 4951, 6237, 0}
    };

    private static final double[][] DISTANCE = new double[][]{
            {0, 576.9631, 946.4954, 597.5972, 373.8127, 559.7673, 709.0215, 1208.328, 603.6477, 695.208, 680.709, 1936.572, 332.4644, 592.5679, 908.7715, 426.1877, 756.1987, 672.5906, 1590.224, 527.3008, 483.4673, 2140.978, 2184.402, 408.1648, 540.7388},
            {576.9631, 0, 369.5327, 613.0386, 429.1079, 312.8831, 1196.489, 1502.14, 405.8975, 1241.961, 960.3459, 2318.076, 786.5959, 949.5669, 938.7461, 999.5005, 179.2426, 96.2744, 1999.584, 210.7656, 736.3755, 2456.263, 2339.509, 844.1663, 36.4947},
            {946.4954, 369.5327, 0, 858.3308, 749.6018, 556.0706, 1541.273, 1764.791, 621.3306, 1603.165, 1250.962, 2600.078, 1137.335, 1266.851, 1124.778, 1368.267, 190.3157, 274.3105, 2299.429, 494.2224, 1043.484, 2703.402, 2503.828, 1188.549, 405.7886},
            {597.5972, 613.0386, 858.3308, 0, 255.0303, 311.3071, 790.1213, 907.4331, 237.0703, 932.2173, 406.3386, 1741.873, 485.5564, 1186.858, 345.8738, 830.3635, 720.4687, 675.3437, 1447.104, 403.8657, 255.8823, 1853.617, 1733.132, 1005.761, 592.0278},
            {373.8127, 429.1079, 749.6018, 255.0303, 0, 225.8954, 794.1726, 1080.374, 238.944, 879.5647, 533.156, 1889.528, 402.3291, 947.3188, 598.541, 700.4368, 578.3286, 512.3965, 1570.725, 255.6551, 307.3289, 2036.128, 1967.256, 775.239, 399.2253},
            {559.7673, 312.8831, 556.0706, 311.3071, 225.8954, 0, 1009.689, 1216.868, 94.2588, 1104.574, 694.9153, 2047.122, 627.115, 1084.5, 626.1548, 922.3181, 409.3542, 365.6853, 1743.432, 104.6478, 491.1125, 2164.855, 2027.319, 933.196, 298.8486},
            {709.0215, 1196.489, 1541.273, 790.1213, 794.1726, 1009.689, 0, 663.8762, 982.7378, 221.422, 447.8044, 1249.763, 411.1133, 1097.608, 851.8228, 423.7053, 1362.874, 1288.966, 895.0908, 1049.266, 537.6206, 1493.843, 1686.675, 912.2104, 1161.676},
            {1208.328, 1502.14, 1764.791, 907.4331, 1080.374, 1216.868, 663.8762, 0, 1143.791, 874.5181, 551.6299, 841.624, 880.0728, 1714.651, 694.0088, 1066.563, 1625.87, 1574.822, 593.4216, 1301.511, 780.9512, 955.802, 1024.566, 1519.174, 1475.479},
            {603.6477, 405.8975, 621.3306, 237.0703, 238.944, 94.2588, 982.7378, 1143.791, 0, 1094.906, 636.9045, 1978.943, 620.488, 1151.868, 535.0244, 936.2502, 489.5645, 453.2583, 1682.489, 198.9058, 450.2585, 2086.845, 1936.304, 992.3379, 392.9045},
            {695.208, 1241.961, 1603.165, 932.2173, 879.5647, 1104.574, 221.422, 874.5181, 1094.906, 0, 642.2092, 1375.635, 477.459, 963.7202, 1046.119, 305.3132, 1417.072, 1337.648, 1017.332, 1125.041, 677.0608, 1649.619, 1891.166, 795.2136, 1205.747},
            {680.709, 960.3459, 1250.962, 406.3386, 533.156, 694.9153, 447.8044, 551.6299, 636.9045, 642.2092, 0, 1358.213, 378.5906, 1236.192, 405.0906, 674.479, 1096.712, 1038.645, 1048.539, 768.1641, 229.4867, 1506.451, 1503.794, 1038.624, 931.7148},
            {1936.572, 2318.076, 2600.078, 1741.873, 1889.528, 2047.122, 1249.763, 841.624, 1978.943, 1375.635, 1358.213, 0, 1608.082, 2335.816, 1530.57, 1661.778, 2453.352, 2396.794, 358.3762, 2125.512, 1582.369, 361.5388, 986.8149, 2157.517, 2288.748},
            {332.4644, 786.5959, 1137.335, 485.5564, 402.3291, 627.115, 411.1133, 880.0728, 620.488, 477.459, 378.5906, 1608.082, 0, 858.251, 700.8213, 348.2725, 955.6191, 879.9795, 1265.573, 651.1179, 254.9977, 1808.52, 1872.696, 660.5173, 751.4614},
            {592.5679, 949.5669, 1266.851, 1186.858, 947.3188, 1084.5, 1097.608, 1714.651, 1151.868, 963.7202, 1236.192, 2335.816, 858.251, 0, 1500.774, 675.7505, 1098.282, 1021.611, 1977.613, 1015.165, 1065.599, 2591.447, 2725.79, 197.8015, 923.2229},
            {908.7715, 938.7461, 1124.778, 345.8738, 598.541, 626.1548, 851.8228, 694.0088, 535.0244, 1046.119, 405.0906, 1530.57, 700.8213, 1500.774, 0, 1039.77, 1018.399, 987.8645, 1280.737, 728.3743, 450.3982, 1589.835, 1401.321, 1311.21, 922.3145},
            {426.1877, 999.5005, 1368.267, 830.3635, 700.4368, 922.3181, 423.7053, 1066.563, 936.2502, 305.3132, 674.479, 1661.778, 348.2725, 675.7505, 1039.77, 0, 1178.439, 1095.657, 1304.043, 918.5615, 601.9917, 1916.578, 2090.089, 496.4224, 963.0435},
            {756.1987, 179.2426, 190.3157, 720.4687, 578.3286, 409.3542, 1362.874, 1625.87, 489.5645, 1417.072, 1096.712, 2453.352, 955.6191, 1098.282, 1018.399, 1178.439, 0, 84.3365, 2143.565, 328.7515, 880.5469, 2574.082, 2415.489, 1008.2, 215.561},
            {672.5906, 96.2744, 274.3105, 675.3437, 512.3965, 365.6853, 1288.966, 1574.822, 453.2583, 1337.648, 1038.645, 2396.794, 879.9795, 1021.611, 987.8645, 1095.657, 84.3365, 0, 2082.316, 273.4106, 818.1228, 2526.562, 2388.689, 926.6267, 132.7684},
            {1590.224, 1999.584, 2299.429, 1447.104, 1570.725, 1743.432, 895.0908, 593.4216, 1682.489, 1017.332, 1048.539, 358.3762, 1265.573, 1977.613, 1280.737, 1304.043, 2143.565, 2082.316, 0, 1814.83, 1264.193, 661.6543, 1129.327, 1800.098, 1968.689},
            {527.3008, 210.7656, 494.2224, 403.8657, 255.6551, 104.6478, 1049.266, 1301.511, 198.9058, 1125.041, 768.1641, 2125.512, 651.1179, 1015.165, 728.3743, 918.5615, 328.7515, 273.4106, 1814.83, 0, 552.4229, 2253.211, 2128.828, 875.2542, 194.5945},
            {483.4673, 736.3755, 1043.484, 255.8823, 307.3289, 491.1125, 537.6206, 780.9512, 450.2585, 677.0608, 229.4867, 1582.369, 254.9977, 1065.599, 450.3982, 601.9917, 880.5469, 818.1228, 1264.193, 552.4229, 0, 1735.937, 1712.136, 871.6396, 706.5024},
            {2140.978, 2456.263, 2703.402, 1853.617, 2036.128, 2164.855, 1493.843, 955.802, 2086.845, 1649.619, 1506.451, 361.5388, 1808.52, 2591.447, 1589.835, 1916.578, 2574.082, 2526.562, 661.6543, 2253.211, 1735.937, 0, 694.9363, 2404.839, 2430.269},
            {2184.402, 2339.509, 2503.828, 1733.132, 1967.256, 2027.319, 1686.675, 1024.566, 1936.304, 1891.166, 1503.794, 986.8149, 1872.696, 2725.79, 1401.321, 2090.089, 2415.489, 2388.689, 1129.327, 2128.828, 1712.136, 694.9363, 0, 2528.479, 2321.873},
            {408.1648, 844.1663, 1188.549, 1005.761, 775.239, 933.196, 912.2104, 1519.174, 992.3379, 795.2136, 1038.624, 2157.517, 660.5173, 197.8015, 1311.21, 496.4224, 1008.2, 926.6267, 1800.098, 875.2542, 871.6396, 2404.839, 2528.479, 0, 813.5513},
            {540.7388, 36.4947, 405.7886, 592.0278, 399.2253, 298.8486, 1161.676, 1475.479, 392.9045, 1205.747, 931.7148, 2288.748, 751.4614, 923.2229, 922.3145, 963.0435, 215.561, 132.7684, 1968.689, 194.5945, 706.5024, 2430.269, 2321.873, 813.5513, 0}
    };

    private static final int[] SUPPLY = new int[FLOW.length];

    private static final int[] DEMAND = new int[FLOW[0].length];

    static {

        if (!Utils.checkSymmetric(FLOW)) throw new RuntimeException("CAB FLOW is not Symmetric!");
        if (!Utils.checkSymmetric(DISTANCE)) throw new RuntimeException("CAB DISTANCE is not Symmetric!");

        final int rows = FLOW.length;
        final int cols = FLOW[0].length;

        //Calculates sum of each row of given matrix
        for (int i = 0; i < rows; i++) {
            int sumRow = 0;
            for (int j = 0; j < cols; j++) {
                sumRow += FLOW[i][j];
            }
            SUPPLY[i] = sumRow;
        }

        //Calculates sum of each column of given matrix
        for (int i = 0; i < cols; i++) {
            int sumCol = 0;
            for (int[] ints : FLOW) {
                sumCol += ints[i];
            }
            DEMAND[i] = sumCol;
        }
    }


    private static final double MAX_DISTANCE = Arrays.stream(DISTANCE).flatMapToDouble(Arrays::stream).filter(v -> v > 0D).max().orElseThrow();
    private static final int MAX_DEMAND = Arrays.stream(DEMAND).filter(i -> i > 0).max().orElseThrow();
    private static final int MAX_SUPPLY = Arrays.stream(SUPPLY).filter(i -> i > 0).max().orElseThrow();
    private static final Max MAX = new Max(MAX_DISTANCE, MAX_SUPPLY, MAX_DEMAND, DISTANCE.length * MAX_DISTANCE);

    @Override
    public Max max() {
        return MAX;
    }
}
